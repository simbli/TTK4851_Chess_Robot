/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chessur;

/**
 *
 * @author BÃ¸rge
 *
 * This class contains all the different URScript we use for the UR
 */
public class LibraryURscript {

    static String payloadUR = "0.850"; // in kilograms (0.850 kg 2finger griper)
    static String serverPC;
    static int portPC;

    public LibraryURscript(String serverPC, int portPC) {
        this.serverPC = serverPC;
        this.portPC = portPC;
    }

    public String threadSensorData() {
        String threadSensorData
                = "	thread SensorDataThread(): \n"
                + "		socket_close(\"stream\") #Close the stream \"stream\"\n"
                + "		socket_open(\"127.0.0.1\",63351,\"stream\")\n"
                + "		sleep(3)\n"
                + "		socket_close(\"pc_connect\") #Close the stream \"pc_connect\"\n"
                + "             global var_1 =   False  \n" // new
                + "         while (var_1 ==  False  ):\n"// new
                + "		global var_1 = socket_open(\"" + serverPC + "\"," + portPC + ",\"pc_connect\")\n" // new
                + "         end\n"// new
                + "		socket_send_string(\"StartOfInput\", \"pc_connect\")\n"
                + "		socket_send_string(\";\", \"pc_connect\")\n"
                + "		while True:\n" // new
                + "			global sensor_data = socket_read_ascii_float(6,\"stream\")\n"
                + "			varmsg(\"sensor_data\",sensor_data)\n"
                + "			if (sensor_data[0]  >=6): #IfSensorDataArrayIsFilledThenRun\n"
                + "				global Fx = sensor_data[1]#Set input sensor data to appropiate variables\n"
                + "				global Fy = sensor_data[2]\n"
                + "				global Fz = sensor_data[3]\n"
                + "				global Mx = sensor_data[4]\n"
                + "				global My = sensor_data[5]\n"
                + "				global Mz = sensor_data[6]\n"
                + "			else: #IfItIsNotThenSetThemAllToZer0\n"
                + "				global Fx = 0.0 # set the variables to zer0\n"
                + "				global Fy = 0.0\n"
                + "				global Fz = 0.0\n"
                + "				global Mx = 0.0\n"
                + "				global My = 0.0\n"
                + "				global Mz = 0.0\n"
                + "			end #EndIf\n"
                + "			socket_send_string(\";\", \"pc_connect\")#New Line in java, to seperate the informationblocks\n"
                + "			socket_send_string(\"Fx: \", \"pc_connect\")#SendVariables\n"
                + "			socket_send_string(Fx, \"pc_connect\")#SendVariables\n"
                + "			socket_send_string(\";\", \"pc_connect\")#NewLineInJava\n"
                + "			socket_send_string(\"Fy: \", \"pc_connect\")\n"
                + "			socket_send_string(Fy, \"pc_connect\")\n"
                + "			socket_send_string(\";\", \"pc_connect\")\n"
                + "			socket_send_string(\"Fz: \", \"pc_connect\")\n"
                + "			socket_send_string(Fz, \"pc_connect\")\n"
                + "			socket_send_string(\";\", \"pc_connect\")\n"
                + "			sleep(0.5)\n"
                + "    global var_1 =   False\n"
                + "		end #EndWhile\n"
                + "	end #EndThread\n"
                + " threadId_SensorDataThread = run SensorDataThread() #RunThread\n";
        return threadSensorData;
    }

    public String initialization() {
        String initalization
                = "  modbus_add_signal(\"0.0.0.0\", 255, 0, 3, \"Modbus_1\")\n"
                + "  modbus_set_signal_update_frequency(\"Modbus_1\", 10)\n"
                + "  set_analog_inputrange(0, 0)\n"
                + "  set_analog_inputrange(1, 0)\n"
                + "  set_analog_inputrange(2, 0)\n"
                + "  set_analog_inputrange(3, 0)\n"
                + "  set_analog_outputdomain(0, 0)\n"
                + "  set_analog_outputdomain(1, 0)\n"
                + "  set_tool_voltage(0)\n"
                + "  set_runstate_outputs([])\n"
                + "  modbus_set_runstate_dependent_choice(\"Modbus_1\",0)\n"
                + "  set_payload(" + payloadUR + ")\n"
                + "  set_gravity([0.0, 0.0, 9.82])\n"
                + "  Base=p[0.0,0.0,0.0,0.0,0.0,0.0]\n"
                + "  Fx=0.0\n"
                + "  Fy=0.0\n"
                + "  Fz=0.0\n"
                + "  Mx=0.0\n"
                + "  My=0.0\n"
                + "  Mz=0.0\n";
        return initalization;
    }

    public String init() {
        String init
                = "def pickUpTest():\n"
                + "  modbus_add_signal(\"127.0.0.1\", 255, 128, 3, \"MODBUS_LOKAL\")\n"
                + "  modbus_set_signal_update_frequency(\"MODBUS_LOKAL\", 10)\n"
                + "  modbus_add_signal(\"127.0.0.1\", 255, 300, 2, \"MODBUS_1\")\n"
                + "  modbus_set_signal_update_frequency(\"MODBUS_1\", 10)\n"
                + "  modbus_add_signal(\"10.0.0.12\", 255, 128, 2, \"MODBUS_REMOTE\")\n"
                + "  modbus_set_signal_update_frequency(\"MODBUS_REMOTE\", 10)\n"
                + "  set_standard_analog_input_domain(0, 1)\n"
                + "  set_standard_analog_input_domain(1, 1)\n"
                + "  set_tool_analog_input_domain(0, 1)\n"
                + "  set_tool_analog_input_domain(1, 1)\n"
                + "  set_analog_outputdomain(0, 0)\n"
                + "  set_analog_outputdomain(1, 0)\n"
                + "  set_tool_voltage(0)\n"
                + "  set_standard_digital_input_action(0, \"default\")\n"
                + "  set_standard_digital_input_action(1, \"default\")\n"
                + "  set_standard_digital_input_action(2, \"default\")\n"
                + "  set_standard_digital_input_action(3, \"default\")\n"
                + "  set_standard_digital_input_action(4, \"default\")\n"
                + "  set_standard_digital_input_action(5, \"default\")\n"
                + "  set_standard_digital_input_action(6, \"default\")\n"
                + "  set_standard_digital_input_action(7, \"default\")\n"
                + "  set_tool_digital_input_action(0, \"default\")\n"
                + "  set_tool_digital_input_action(1, \"default\")\n"
                + "  modbus_set_runstate_dependent_choice(\"MODBUS_LOKAL\",0)\n"
                + "  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])\n"
                + "  set_payload(" + payloadUR + ")\n"
                + "  set_gravity([0.0, 0.0, 9.82])\n"
                + "  \n"
                + "  ###########################################\n"
                + "  #######Gripper urcap preamble start########\n"
                + "  #######Version 1.0.2########\n"
                + "  \n"
                + "  #aliases for the gripper variable names\n"
                + "  ACT = 1\n"
                + "  GTO = 2\n"
                + "  ATR = 3\n"
                + "  ARD = 4\n"
                + "  FOR = 5\n"
                + "  SPE = 6\n"
                + "  OBJ = 7\n"
                + "  STA = 8\n"
                + "  FLT = 9\n"
                + "  POS = 10\n"
                + "  PRE = 11\n"
                + "  \n"
                + "  def rq_init_connection(gripper_sid=9, gripper_socket=\"gripper_socket\"):\n"
                + "  socket_open(\"127.0.0.1\",63352, gripper_socket)\n"
                + "  socket_set_var(\"SID\", gripper_sid,  gripper_socket)\n"
                + "  ack = socket_read_byte_list(3, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_activate(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_gripper_act = 0\n"
                + "  rq_set_var(ACT,1, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_activate_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_activate(gripper_socket)\n"
                + "  \n"
                + "  while(not rq_is_gripper_activated(gripper_socket)):\n"
                + "  # wait for activation completed\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_stop(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(GTO,0, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_reset(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_gripper_act = 0\n"
                + "  rq_obj_detect = 0\n"
                + "  rq_mov_complete = 0\n"
                + "  \n"
                + "  rq_set_var(ACT,0, gripper_socket)\n"
                + "  rq_set_var(ATR,0, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_auto_release_open_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  \n"
                + "  rq_set_var(ARD,0, gripper_socket)\n"
                + "  rq_set_var(ACT,1, gripper_socket)\n"
                + "  rq_set_var(ATR,1, gripper_socket)\n"
                + "  \n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  \n"
                + "  while(not is_FLT_autorelease_completed(gFLT)):\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_auto_release_close_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(ARD,1, gripper_socket)\n"
                + "  rq_set_var(ACT,1, gripper_socket)\n"
                + "  rq_set_var(ATR,1, gripper_socket)\n"
                + "  \n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  \n"
                + "  while(not is_FLT_autorelease_completed(gFLT)):\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_set_force(force, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(FOR,force, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_set_speed(speed, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(SPE,speed, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_open(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move(0, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_close(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move(255, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_open_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move_and_wait(0, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_close_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move_and_wait(255, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_move(pos, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_mov_complete = 0\n"
                + "  rq_obj_detect = 0\n"
                + "  \n"
                + "  rq_set_pos(pos, gripper_socket)\n"
                + "  rq_go_to(gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_move_and_wait(pos, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move(pos, gripper_socket)\n"
                + "  \n"
                + "  while (not rq_is_motion_complete(gripper_socket)):\n"
                + "  # wait for motion completed\n"
                + "  sleep(0.01)\n"
                + "  sync()\n"
                + "  end\n"
                + "  \n"
                + "  # following code used for compatibility with previous versions\n"
                + "  rq_is_object_detected(gripper_socket)\n"
                + "  \n"
                + "  if (rq_obj_detect != 1):\n"
                + "  rq_mov_complete = 1\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_go_to(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(GTO,1, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  # reset the rGTO to prevent movement and\n"
                + "  # set the position\n"
                + "  def rq_set_pos(pos, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(GTO,0, gripper_socket)\n"
                + "  \n"
                + "  rq_set_var(POS, pos, gripper_socket)\n"
                + "  \n"
                + "  gPRE = rq_get_var(PRE, 3, gripper_socket)\n"
                + "  pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48\n"
                + "  sync()\n"
                + "  while (pre != pos):\n"
                + "  rq_set_var(POS, pos, gripper_socket)\n"
                + "  gPRE = rq_get_var(PRE, 3, gripper_socket)\n"
                + "  pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48\n"
                + "  sync()\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_is_motion_complete(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_mov_complete = 0\n"
                + "  \n"
                + "  gOBJ = rq_get_var(OBJ, 1, gripper_socket)\n"
                + "  sleep(0.01)\n"
                + "  \n"
                + "  if (is_OBJ_gripper_at_position(gOBJ)):\n"
                + "  rq_mov_complete = 1\n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  if (is_OBJ_object_detected(gOBJ)):\n"
                + "  rq_mov_complete = 1\n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  return False\n"
                + "  \n"
                + "  end\n"
                + "  \n"
                + "  def rq_is_gripper_activated(gripper_socket=\"gripper_socket\"):\n"
                + "  gSTA = rq_get_var(STA, 1, gripper_socket)\n"
                + "  \n"
                + "  if(is_STA_gripper_activated(gSTA)):\n"
                + "  rq_gripper_act = 1\n"
                + "  return True\n"
                + "  else:\n"
                + "  rq_gripper_act = 0\n"
                + "  return False\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_is_object_detected(gripper_socket=\"gripper_socket\"):\n"
                + "  gOBJ = rq_get_var(OBJ, 1, gripper_socket)\n"
                + "  \n"
                + "  if(is_OBJ_object_detected(gOBJ)):\n"
                + "  rq_obj_detect = 1\n"
                + "  return True\n"
                + "  else:\n"
                + "  rq_obj_detect = 0\n"
                + "  return False\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_current_pos(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_pos = socket_get_var(\"POS\",gripper_socket)\n"
                + "  sync()\n"
                + "  return rq_pos\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_fault_code(gripper_socket=\"gripper_socket\"):\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  \n"
                + "  if(is_FLT_no_fault(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"No Fault (0x00)\")\n"
                + "  elif (is_FLT_action_delayed(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Priority Fault: Action delayed, initialization must be completed prior to action (0x05)\")\n"
                + "  elif (is_FLT_not_activated(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Priority Fault: The activation must be set prior to action (0x07)\")\n"
                + "  elif (is_FLT_autorelease_in_progress(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Minor Fault: Automatic release in progress (0x0B)\")\n"
                + "  elif (is_FLT_overcurrent(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Minor Fault: Overcurrent protection tiggered (0x0E)\")\n"
                + "  elif (is_FLT_autorelease_completed(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Major Fault: Automatic release completed (0x0F)\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Fault : \", \"Unkwown Fault\")\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_num_cycles(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET NCY\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  \n"
                + "  if(string_from_server == \"0\"):\n"
                + "  textmsg(\"Gripper Cycle Number : \", \"Number of cycles is unreachable.\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Cycle Number : \", string_from_server)\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_driver_state(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET DST\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  \n"
                + "  if(string_from_server == \"0\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_INIT\")\n"
                + "  elif(string_from_server == \"1\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_LISTEN\")\n"
                + "  elif(string_from_server == \"2\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_READ_INFO\")\n"
                + "  elif(string_from_server == \"3\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_ACTIVATION\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_RUN\")\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_serial_number():\n"
                + "  #socket_send_string(\"GET SNU\",gripper_socket)\n"
                + "  #sync()\n"
                + "  #string_from_server = socket_read_string(gripper_socket)\n"
                + "  #sync()\n"
                + "  #textmsg(\"Gripper Serial Number : \", string_from_server)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_firmware_version(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET FWV\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  textmsg(\"Gripper Firmware Version : \", string_from_server)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_driver_version(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET VER\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  textmsg(\"Gripper Driver Version : \", string_from_server)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_print_gripper_probleme_connection(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET PCO\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  if (string_from_server == \"0\"):\n"
                + "  textmsg(\"Gripper Connection State : \", \"No connection problem detected\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Connection State : \", \"Connection problem detected\")\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']\n"
                + "  def is_ack(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 3\n"
                + "  if (list_of_bytes[0] != 3):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte not is 'a'?\n"
                + "  if (list_of_bytes[1] != 97):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte not is 'c'?\n"
                + "  if (list_of_bytes[2] != 99):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte not is 'k'?\n"
                + "  if (list_of_bytes[3] != 107):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']\n"
                + "  def is_not_ack(list_of_bytes):\n"
                + "  if (is_ack(list_of_bytes)):\n"
                + "  return False\n"
                + "  else:\n"
                + "  return True\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def is_STA_gripper_activated (list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 1\n"
                + "  if (list_of_bytes[0] != 1):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # byte is '3'?\n"
                + "  if (list_of_bytes[1] == 51):\n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # Returns True if list_of_byte is [1, '1'] or [1, '2']\n"
                + "  # Used to test OBJ = 0x1 or OBJ = 0x2\n"
                + "  def is_OBJ_object_detected (list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 1\n"
                + "  if (list_of_bytes[0] != 1):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # byte is '2'?\n"
                + "  if (list_of_bytes[1] == 50):\n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  # byte is '1'?\n"
                + "  if (list_of_bytes[1]  == 49):\n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  return False\n"
                + "  \n"
                + "  end\n"
                + "  \n"
                + "  # Returns True if list_of_byte is [1, '3']\n"
                + "  # Used to test OBJ = 0x3\n"
                + "  def is_OBJ_gripper_at_position (list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 1\n"
                + "  if (list_of_bytes[0] != 1):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # byte is '3'?\n"
                + "  if (list_of_bytes[1] == 51):\n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  def is_not_OBJ_gripper_at_position (list_of_bytes):\n"
                + "  \n"
                + "  if (is_OBJ_gripper_at_position(list_of_bytes)):\n"
                + "  return False\n"
                + "  else:\n"
                + "  return True\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  def is_FLT_no_fault(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte is '0'?\n"
                + "  if (list_of_bytes[1] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # second byte is '0'?\n"
                + "  if (list_of_bytes[2] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  \n"
                + "  end\n"
                + "  \n"
                + "  def is_FLT_action_delayed(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte is '0'?\n"
                + "  if (list_of_bytes[1] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # second byte is '5'?\n"
                + "  if (list_of_bytes[2] != 53):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  def is_FLT_not_activated(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte is '0'?\n"
                + "  if (list_of_bytes[1] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # second byte is '7'?\n"
                + "  if (list_of_bytes[2] != 55):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  end\n"
                + "  \n"
                + "  def is_FLT_autorelease_in_progress(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte is '1'?\n"
                + "  if (list_of_bytes[1] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # second byte is '1'?\n"
                + "  if (list_of_bytes[2] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  \n"
                + "  end\n"
                + "  \n"
                + "  def is_FLT_overcurrent(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte is '1'?\n"
                + "  if (list_of_bytes[1] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # second byte is '4'?\n"
                + "  if (list_of_bytes[2] != 52):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  \n"
                + "  end\n"
                + "  \n"
                + "  def is_FLT_autorelease_completed(list_of_bytes):\n"
                + "  \n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # first byte is '1'?\n"
                + "  if (list_of_bytes[1] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  # second byte is '5'?\n"
                + "  if (list_of_bytes[2] != 53):\n"
                + "  return False\n"
                + "  end\n"
                + "  \n"
                + "  return True\n"
                + "  \n"
                + "  end\n"
                + "  \n"
                + "  def rq_set_var(var_name, var_value, gripper_socket=\"gripper_socket\"):\n"
                + "  \n"
                + "  sync()\n"
                + "  if (var_name == ACT):\n"
                + "  socket_set_var(\"ACT\", var_value, gripper_socket)\n"
                + "  elif (var_name == GTO):\n"
                + "  socket_set_var(\"GTO\", var_value, gripper_socket)\n"
                + "  elif (var_name == ATR):\n"
                + "  socket_set_var(\"ATR\", var_value, gripper_socket)\n"
                + "  elif (var_name == ARD):\n"
                + "  socket_set_var(\"ARD\", var_value, gripper_socket)\n"
                + "  elif (var_name == FOR):\n"
                + "  socket_set_var(\"FOR\", var_value, gripper_socket)\n"
                + "  elif (var_name == SPE):\n"
                + "  socket_set_var(\"SPE\", var_value, gripper_socket)\n"
                + "  elif (var_name == POS):\n"
                + "  socket_set_var(\"POS\", var_value, gripper_socket)\n"
                + "  else:\n"
                + "  end\n"
                + "  \n"
                + "  sync()\n"
                + "  ack = socket_read_byte_list(3, gripper_socket)\n"
                + "  sync()\n"
                + "  \n"
                + "  while(is_not_ack(ack)):\n"
                + "  \n"
                + "  textmsg(\"rq_set_var : retry\", \" ...\")\n"
                + "  textmsg(\"rq_set_var : var_name = \", var_name)\n"
                + "  textmsg(\"rq_set_var : var_value = \", var_value)\n"
                + "  \n"
                + "  if (ack[0] != 0):\n"
                + "  textmsg(\"rq_set_var : invalid ack value = \", ack)\n"
                + "  end\n"
                + "  \n"
                + "  socket_set_var(var_name , var_value,gripper_socket)\n"
                + "  sync()\n"
                + "  ack = socket_read_byte_list(3, gripper_socket)\n"
                + "  sync()\n"
                + "  end\n"
                + "  end\n"
                + "  \n"
                + "  \n"
                + "  def rq_get_var(var_name, nbr_bytes, gripper_socket=\"gripper_socket\"):\n"
                + "  \n"
                + "  if (var_name == FLT):\n"
                + "  socket_send_string(\"GET FLT\",gripper_socket)\n"
                + "  sync()\n"
                + "  elif (var_name == OBJ):\n"
                + "  socket_send_string(\"GET OBJ\",gripper_socket)\n"
                + "  sync()\n"
                + "  elif (var_name == STA):\n"
                + "  socket_send_string(\"GET STA\",gripper_socket)\n"
                + "  sync()\n"
                + "  elif (var_name == PRE):\n"
                + "  socket_send_string(\"GET PRE\",gripper_socket)\n"
                + "  sync()\n"
                + "  else:\n"
                + "  end\n"
                + "  \n"
                + "  var_value = socket_read_byte_list(nbr_bytes, gripper_socket)\n"
                + "  sync()\n"
                + "  \n"
                + "  return var_value\n"
                + "  end\n"
                + "  \n"
                + "  ############################################\n"
                + "  # normalized functions (maps 0-100 to 0-255)\n"
                + "  ############################################\n"
                + "  def rq_set_force_norm(force_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  force_gripper = norm_to_gripper(force_norm)\n"
                + "  rq_set_force(force_gripper, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_set_speed_norm(speed_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  speed_gripper = norm_to_gripper(speed_norm)\n"
                + "  rq_set_speed(speed_gripper, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_move_norm(pos_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = norm_to_gripper(pos_norm)\n"
                + "  rq_move(pos_gripper, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_move_and_wait_norm(pos_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = norm_to_gripper(pos_norm)\n"
                + "  rq_move_and_wait(pos_gripper, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_set_pos_norm(pos_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = norm_to_gripper(pos_norm)\n"
                + "  rq_set_pos(pos_gripper, gripper_socket)\n"
                + "  end\n"
                + "  \n"
                + "  \n"
                + "  def rq_current_pos_norm(gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = rq_current_pos(gripper_socket)\n"
                + "  pos_norm = gripper_to_norm(pos_gripper)\n"
                + "  return pos_norm\n"
                + "  end\n"
                + "  \n"
                + "  def gripper_to_norm(value_gripper):\n"
                + "  value_norm = (value_gripper / 255) * 100\n"
                + "  return floor(value_norm)\n"
                + "  end\n"
                + "  \n"
                + "  def norm_to_gripper(value_norm):\n"
                + "  value_gripper = (value_norm / 100) * 255\n"
                + "  return ceil(value_gripper)\n"
                + "  end\n"
                + "  \n"
                + "  def rq_get_position():\n"
                + "  return rq_current_pos_norm()\n"
                + "  end\n"
                + "  #########################################\n"
                + "  rq_obj_detect = 0\n"
                + "  socket_open(\"127.0.0.1\",63352,\"gripper_socket\")\n"
                + "  \n";
        return init;
    }

    public String pickUpTest() {
        String pickUpTest
                = "  while (True):\n"
                + "    $ 1 \"Robot Program\"\n"
                + "    $ 2 \"MoveJ\"\n"
                + "    $ 3 \"Waypoint_1\"\n"
                + "    movej([1.437260627746582, -1.3565219084369105, 1.191516399383545, -1.4128630797015589, -1.5807607809649866, 1.6339199542999268], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "    $ 4 \"MoveJ\"\n"
                + "    $ 5 \"Waypoint_4\"\n"
                + "    movej([1.5205708742141724, -1.173166577016012, 1.6867141723632812, -2.129031483327047, -1.5430477301227015, 1.5738879442214966], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "    $ 6 \"Gripper Move 48%\"\n"
                + "    if(not rq_is_gripper_activated()):\n"
                + "    popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "    end\n"
                + "    rq_set_speed_norm(100)\n"
                + "    rq_set_force_norm(20)\n"
                + "    rq_move_and_wait_norm(48)\n"
                + "    $ 7 \"MoveJ\"\n"
                + "    $ 8 \"Waypoint_1\"\n"
                + "    movej([1.437260627746582, -1.3565219084369105, 1.191516399383545, -1.4128630797015589, -1.5807607809649866, 1.6339199542999268], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "    $ 9 \"MoveJ\"\n"
                + "    $ 10 \"Waypoint_4\"\n"
                + "    movej([1.5205708742141724, -1.173166577016012, 1.6867141723632812, -2.129031483327047, -1.5430477301227015, 1.5738879442214966], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "    $ 11 \"Gripper Close\"\n"
                + "    if(not rq_is_gripper_activated()):\n"
                + "    popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "    end\n"
                + "    rq_set_speed_norm(100)\n"
                + "    rq_set_force_norm(20)\n"
                + "    rq_move_and_wait_norm(100)\n"
                + "    $ 12 \"MoveJ\"\n"
                + "    $ 13 \"Waypoint_5\"\n"
                + "    movej([1.3995773385402968, -1.3296695617570409, 1.1878671640069776, -1.4350101622172584, -1.579089321271283, 1.5828467986785073], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "    $ 14 \"MoveJ\"\n"
                + "    $ 15 \"Waypoint_1\"\n"
                + "    movej([1.437260627746582, -1.3565219084369105, 1.191516399383545, -1.4128630797015589, -1.5807607809649866, 1.6339199542999268], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "  end\n"
                + "end";

        return init() + pickUpTest;
    }

    public String moveChessPiece(String moveCoordinates) {
        String moveChessPiece
                = "moveCoordinates=[0, 0, 1, 4]\n"
                + "  a=1.2\n"
                + "  v=0.3\n"
                + "  # Home position\n"
                + "  movej([1.437260627746582, -1.3565219084369105, 1.191516399383545, -1.4128630797015589, -1.5807607809649866, -1.6339199542999268], a=1.3962634015954636, v=1.0471975511965976)\n"
                + "  sleep(0.1)\n"
                + "  # Open gripper\n"
                + "  $ 6 \"Gripper Move 48%\"\n"
                + "  if(not rq_is_gripper_activated()):\n"
                + "    popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "    end\n"
                + "  rq_set_speed_norm(100)\n"
                + "  rq_set_force_norm(20)\n"
                + "  rq_move_and_wait_norm(48)\n"
                + "  sleep(1)\n"
                + "\n"
                + "  # Go to position and pick up chess piece\n"
                + "  x=moveCoordinates[0]\n"
                + "  y=moveCoordinates[1]\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.102335237869, -.168343074282, .297989818178, -.019260716954, 3.130819463753, -.025828817873], p[-.093155862685, -.454771650868, .303465520010, .019582139985, -3.107684814407, .158542860510], x/7), interpolate_pose(p[.212182351553, -.172490948416, .300156989303, -.019301606141, 3.130849924275, -.025982323624], p[.205447793490, -.450920263295, .300327644078, -.018494755038, 3.103240208654, -.196822004540],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[.212170106655, -.172544177569, .174898764777, -.019171067511, 3.130789478341, -.026197152585]),p[.212170059746, -.172528428533, .174874657752, -.019115841773, 3.130801705064, -.025994921967])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(0.1)\n"
                + "  #Pallet floor position\n"
                + "  pose_1 = interpolate_pose(interpolate_pose(p[-.102340332155, -.168319197016, .174001023681, -.019073464729, 3.130836801756, -.025873605683], p[-.105268461386, -.487288776903, .173994101013, -.019027908981, 3.130926998196, -.025998431907], x/7), interpolate_pose(p[.212176262817, -.172514145477, .174869584384, -.019247167522, 3.130817337018, -.025944141011], p[.210143427430, -.488894719504, .174872285907, -.019123189143, 3.130827380259, -.025935322805],x/7), y/7)\n"
                + "  movel(pose_trans(pose_1, pose_trans(pose_inv(p[.212170106655, -.172544177569, .174898764777, -.019171067511, 3.130789478341, -.026197152585]),p[.212170059746, -.172528428533, .174874657752, -.019115841773, 3.130801705064, -.025994921967])), a, v)\n"
                + "  movel(pose_1, a, v)\n"
                + "  sleep(0.1)\n"
                + "\n"
                + "  #Grip piece\n"
                + "  $ 7 \"Gripper Close\"\n"
                + "  if(not rq_is_gripper_activated()):\n"
                + "      popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "      end\n"
                + "  rq_set_speed_norm(100)\n"
                + "  rq_set_force_norm(0)\n"
                + "  rq_move_and_wait_norm(100)\n"
                + "\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.102335237869, -.168343074282, .297989818178, -.019260716954, 3.130819463753, -.025828817873], p[-.093155862685, -.454771650868, .303465520010, .019582139985, -3.107684814407, .158542860510], x/7), interpolate_pose(p[.212182351553, -.172490948416, .300156989303, -.019301606141, 3.130849924275, -.025982323624], p[.205447793490, -.450920263295, .300327644078, -.018494755038, 3.103240208654, -.196822004540],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[.212170106655, -.172544177569, .174898764777, -.019171067511, 3.130789478341, -.026197152585]),p[.212170059746, -.172528428533, .174874657752, -.019115841773, 3.130801705064, -.025994921967])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(1)\n"
                + "\n"
                + "\n"
                + "  # Go to position and put down chess piece\n"
                + "  x=moveCoordinates[2]\n"
                + "  y=moveCoordinates[3]\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.102335237869, -.168343074282, .297989818178, -.019260716954, 3.130819463753, -.025828817873], p[-.093155862685, -.454771650868, .303465520010, .019582139985, -3.107684814407, .158542860510], x/7), interpolate_pose(p[.212182351553, -.172490948416, .300156989303, -.019301606141, 3.130849924275, -.025982323624], p[.205447793490, -.450920263295, .300327644078, -.018494755038, 3.103240208654, -.196822004540],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[.212170106655, -.172544177569, .174898764777, -.019171067511, 3.130789478341, -.026197152585]),p[.212170059746, -.172528428533, .174874657752, -.019115841773, 3.130801705064, -.025994921967])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(0.1)\n"
                + "  #Pallet floor position\n"
                + "  pose_1 = interpolate_pose(interpolate_pose(p[-.102340332155, -.168319197016, .174001023681, -.019073464729, 3.130836801756, -.025873605683], p[-.105268461386, -.487288776903, .173994101013, -.019027908981, 3.130926998196, -.025998431907], x/7), interpolate_pose(p[.212176262817, -.172514145477, .174869584384, -.019247167522, 3.130817337018, -.025944141011], p[.210143427430, -.488894719504, .174872285907, -.019123189143, 3.130827380259, -.025935322805],x/7), y/7)\n"
                + "  movel(pose_trans(pose_1, pose_trans(pose_inv(p[.212170106655, -.172544177569, .174898764777, -.019171067511, 3.130789478341, -.026197152585]),p[.212170059746, -.172528428533, .174874657752, -.019115841773, 3.130801705064, -.025994921967])), a, v)\n"
                + "  movel(pose_1, a, v)\n"
                + "  sleep(0.1)\n"
                + "  $ 8 \"Gripper Move 48%\"\n"
                + "  if(not rq_is_gripper_activated()):\n"
                + "      popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "      end\n"
                + "  rq_set_speed_norm(100)\n"
                + "  rq_set_force_norm(20)\n"
                + "  rq_move_and_wait_norm(48)\n"
                + "  sleep(1)\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.102335237869, -.168343074282, .297989818178, -.019260716954, 3.130819463753, -.025828817873], p[-.093155862685, -.454771650868, .303465520010, .019582139985, -3.107684814407, .158542860510], x/7), interpolate_pose(p[.212182351553, -.172490948416, .300156989303, -.019301606141, 3.130849924275, -.025982323624], p[.205447793490, -.450920263295, .300327644078, -.018494755038, 3.103240208654, -.196822004540],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[.212170106655, -.172544177569, .174898764777, -.019171067511, 3.130789478341, -.026197152585]),p[.212170059746, -.172528428533, .174874657752, -.019115841773, 3.130801705064, -.025994921967])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(1)\n"
                + "\n"
                + "\n"
                + "  # Home position\n"
                + "  movej([1.437260627746582, -1.3565219084369105, 1.191516399383545, -1.4128630797015589, -1.5807607809649866, 0], a=1.3962634015954636, v=1.0471975511965976)";

        return init() + moveChessPiece;
    }
}
