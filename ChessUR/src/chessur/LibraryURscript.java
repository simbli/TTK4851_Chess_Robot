/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chessur;

/**
 *
 * @author BÃ¸rge
 *
 * This class contains all the different URScript we use for the UR
 */
public class LibraryURscript {

    static String payloadUR = "0.850"; // in kilograms (0.850 kg 2finger griper)
    static String gravity = "[0.0 , 0.0 , 9.82]";
    static String serverPC;
    static int portPC;
    static double a = 1.2;
    static double v = 1.5;

    public LibraryURscript(String serverPC, int portPC) {
        this.serverPC = serverPC;
        this.portPC = portPC;
    }

    public String initUR() {
        String initUR
                = "def palletTest():\n"
                + "  modbus_add_signal(\"127.0.0.1\", 255, 128, 3, \"MODBUS_LOKAL\")\n"
                + "  modbus_set_signal_update_frequency(\"MODBUS_LOKAL\", 10)\n"
                + "  modbus_add_signal(\"127.0.0.1\", 255, 300, 2, \"MODBUS_1\")\n"
                + "  modbus_set_signal_update_frequency(\"MODBUS_1\", 10)\n"
                + "  modbus_add_signal(\"10.0.0.12\", 255, 128, 2, \"MODBUS_REMOTE\")\n"
                + "  modbus_set_signal_update_frequency(\"MODBUS_REMOTE\", 10)\n"
                + "  set_standard_analog_input_domain(0, 1)\n"
                + "  set_standard_analog_input_domain(1, 1)\n"
                + "  set_tool_analog_input_domain(0, 1)\n"
                + "  set_tool_analog_input_domain(1, 1)\n"
                + "  set_analog_outputdomain(0, 0)\n"
                + "  set_analog_outputdomain(1, 0)\n"
                + "  set_tool_voltage(0)\n"
                + "  set_standard_digital_input_action(0, \"default\")\n"
                + "  set_standard_digital_input_action(1, \"default\")\n"
                + "  set_standard_digital_input_action(2, \"default\")\n"
                + "  set_standard_digital_input_action(3, \"default\")\n"
                + "  set_standard_digital_input_action(4, \"default\")\n"
                + "  set_standard_digital_input_action(5, \"default\")\n"
                + "  set_standard_digital_input_action(6, \"default\")\n"
                + "  set_standard_digital_input_action(7, \"default\")\n"
                + "  set_tool_digital_input_action(0, \"default\")\n"
                + "  set_tool_digital_input_action(1, \"default\")\n"
                + "  modbus_set_runstate_dependent_choice(\"MODBUS_LOKAL\",0)\n"
                + "  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])\n"
                + "  set_payload(" + payloadUR + ")\n"
                + "  set_gravity(" + gravity + ")\n"
                + "\n";
        return initUR;
    }

    public String initGripper() {
        String initGripper
                = "  ###########################################\n"
                + "  #######Gripper urcap preamble start########\n"
                + "  #######Version 1.0.2########\n"
                + "\n"
                + "  #aliases for the gripper variable names\n"
                + "  ACT = 1\n"
                + "  GTO = 2\n"
                + "  ATR = 3\n"
                + "  ARD = 4\n"
                + "  FOR = 5\n"
                + "  SPE = 6\n"
                + "  OBJ = 7\n"
                + "  STA = 8\n"
                + "  FLT = 9\n"
                + "  POS = 10\n"
                + "  PRE = 11\n"
                + "\n"
                + "  def rq_init_connection(gripper_sid=9, gripper_socket=\"gripper_socket\"):\n"
                + "  socket_open(\"127.0.0.1\",63352, gripper_socket)\n"
                + "  socket_set_var(\"SID\", gripper_sid,  gripper_socket)\n"
                + "  ack = socket_read_byte_list(3, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_activate(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_gripper_act = 0\n"
                + "  rq_set_var(ACT,1, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_activate_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_activate(gripper_socket)\n"
                + "\n"
                + "  while(not rq_is_gripper_activated(gripper_socket)):\n"
                + "  # wait for activation completed\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_stop(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(GTO,0, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_reset(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_gripper_act = 0\n"
                + "  rq_obj_detect = 0\n"
                + "  rq_mov_complete = 0\n"
                + "\n"
                + "  rq_set_var(ACT,0, gripper_socket)\n"
                + "  rq_set_var(ATR,0, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_auto_release_open_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "\n"
                + "  rq_set_var(ARD,0, gripper_socket)\n"
                + "  rq_set_var(ACT,1, gripper_socket)\n"
                + "  rq_set_var(ATR,1, gripper_socket)\n"
                + "\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "\n"
                + "  while(not is_FLT_autorelease_completed(gFLT)):\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_auto_release_close_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(ARD,1, gripper_socket)\n"
                + "  rq_set_var(ACT,1, gripper_socket)\n"
                + "  rq_set_var(ATR,1, gripper_socket)\n"
                + "\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "\n"
                + "  while(not is_FLT_autorelease_completed(gFLT)):\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_set_force(force, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(FOR,force, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_set_speed(speed, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(SPE,speed, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_open(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move(0, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_close(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move(255, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_open_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move_and_wait(0, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_close_and_wait(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move_and_wait(255, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_move(pos, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_mov_complete = 0\n"
                + "  rq_obj_detect = 0\n"
                + "\n"
                + "  rq_set_pos(pos, gripper_socket)\n"
                + "  rq_go_to(gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_move_and_wait(pos, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_move(pos, gripper_socket)\n"
                + "\n"
                + "  while (not rq_is_motion_complete(gripper_socket)):\n"
                + "  # wait for motion completed\n"
                + "  sleep(0.01)\n"
                + "  sync()\n"
                + "  end\n"
                + "\n"
                + "  # following code used for compatibility with previous versions\n"
                + "  rq_is_object_detected(gripper_socket)\n"
                + "\n"
                + "  if (rq_obj_detect != 1):\n"
                + "  rq_mov_complete = 1\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_go_to(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(GTO,1, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  # reset the rGTO to prevent movement and\n"
                + "  # set the position\n"
                + "  def rq_set_pos(pos, gripper_socket=\"gripper_socket\"):\n"
                + "  rq_set_var(GTO,0, gripper_socket)\n"
                + "\n"
                + "  rq_set_var(POS, pos, gripper_socket)\n"
                + "\n"
                + "  gPRE = rq_get_var(PRE, 3, gripper_socket)\n"
                + "  pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48\n"
                + "  sync()\n"
                + "  while (pre != pos):\n"
                + "  rq_set_var(POS, pos, gripper_socket)\n"
                + "  gPRE = rq_get_var(PRE, 3, gripper_socket)\n"
                + "  pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48\n"
                + "  sync()\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_is_motion_complete(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_mov_complete = 0\n"
                + "\n"
                + "  gOBJ = rq_get_var(OBJ, 1, gripper_socket)\n"
                + "  sleep(0.01)\n"
                + "\n"
                + "  if (is_OBJ_gripper_at_position(gOBJ)):\n"
                + "  rq_mov_complete = 1\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  if (is_OBJ_object_detected(gOBJ)):\n"
                + "  rq_mov_complete = 1\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  return False\n"
                + "\n"
                + "  end\n"
                + "\n"
                + "  def rq_is_gripper_activated(gripper_socket=\"gripper_socket\"):\n"
                + "  gSTA = rq_get_var(STA, 1, gripper_socket)\n"
                + "\n"
                + "  if(is_STA_gripper_activated(gSTA)):\n"
                + "  rq_gripper_act = 1\n"
                + "  return True\n"
                + "  else:\n"
                + "  rq_gripper_act = 0\n"
                + "  return False\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_is_object_detected(gripper_socket=\"gripper_socket\"):\n"
                + "  gOBJ = rq_get_var(OBJ, 1, gripper_socket)\n"
                + "\n"
                + "  if(is_OBJ_object_detected(gOBJ)):\n"
                + "  rq_obj_detect = 1\n"
                + "  return True\n"
                + "  else:\n"
                + "  rq_obj_detect = 0\n"
                + "  return False\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_current_pos(gripper_socket=\"gripper_socket\"):\n"
                + "  rq_pos = socket_get_var(\"POS\",gripper_socket)\n"
                + "  sync()\n"
                + "  return rq_pos\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_fault_code(gripper_socket=\"gripper_socket\"):\n"
                + "  gFLT = rq_get_var(FLT, 2, gripper_socket)\n"
                + "\n"
                + "  if(is_FLT_no_fault(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"No Fault (0x00)\")\n"
                + "  elif (is_FLT_action_delayed(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Priority Fault: Action delayed, initialization must be completed prior to action (0x05)\")\n"
                + "  elif (is_FLT_not_activated(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Priority Fault: The activation must be set prior to action (0x07)\")\n"
                + "  elif (is_FLT_autorelease_in_progress(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Minor Fault: Automatic release in progress (0x0B)\")\n"
                + "  elif (is_FLT_overcurrent(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Minor Fault: Overcurrent protection tiggered (0x0E)\")\n"
                + "  elif (is_FLT_autorelease_completed(gFLT)):\n"
                + "  textmsg(\"Gripper Fault : \", \"Major Fault: Automatic release completed (0x0F)\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Fault : \", \"Unkwown Fault\")\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_num_cycles(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET NCY\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "\n"
                + "  if(string_from_server == \"0\"):\n"
                + "  textmsg(\"Gripper Cycle Number : \", \"Number of cycles is unreachable.\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Cycle Number : \", string_from_server)\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_driver_state(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET DST\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "\n"
                + "  if(string_from_server == \"0\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_INIT\")\n"
                + "  elif(string_from_server == \"1\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_LISTEN\")\n"
                + "  elif(string_from_server == \"2\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_READ_INFO\")\n"
                + "  elif(string_from_server == \"3\"):\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_ACTIVATION\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Driver State : \", \"RQ_STATE_RUN\")\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_serial_number():\n"
                + "  #socket_send_string(\"GET SNU\",gripper_socket)\n"
                + "  #sync()\n"
                + "  #string_from_server = socket_read_string(gripper_socket)\n"
                + "  #sync()\n"
                + "  #textmsg(\"Gripper Serial Number : \", string_from_server)\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_firmware_version(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET FWV\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  textmsg(\"Gripper Firmware Version : \", string_from_server)\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_driver_version(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET VER\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  textmsg(\"Gripper Driver Version : \", string_from_server)\n"
                + "  end\n"
                + "\n"
                + "  def rq_print_gripper_probleme_connection(gripper_socket=\"gripper_socket\"):\n"
                + "  socket_send_string(\"GET PCO\",gripper_socket)\n"
                + "  sync()\n"
                + "  string_from_server = socket_read_string(gripper_socket)\n"
                + "  sync()\n"
                + "  if (string_from_server == \"0\"):\n"
                + "  textmsg(\"Gripper Connection State : \", \"No connection problem detected\")\n"
                + "  else:\n"
                + "  textmsg(\"Gripper Connection State : \", \"Connection problem detected\")\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']\n"
                + "  def is_ack(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 3\n"
                + "  if (list_of_bytes[0] != 3):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte not is 'a'?\n"
                + "  if (list_of_bytes[1] != 97):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte not is 'c'?\n"
                + "  if (list_of_bytes[2] != 99):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte not is 'k'?\n"
                + "  if (list_of_bytes[3] != 107):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']\n"
                + "  def is_not_ack(list_of_bytes):\n"
                + "  if (is_ack(list_of_bytes)):\n"
                + "  return False\n"
                + "  else:\n"
                + "  return True\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def is_STA_gripper_activated (list_of_bytes):\n"
                + "\n"
                + "  # list length is not 1\n"
                + "  if (list_of_bytes[0] != 1):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # byte is '3'?\n"
                + "  if (list_of_bytes[1] == 51):\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # Returns True if list_of_byte is [1, '1'] or [1, '2']\n"
                + "  # Used to test OBJ = 0x1 or OBJ = 0x2\n"
                + "  def is_OBJ_object_detected (list_of_bytes):\n"
                + "\n"
                + "  # list length is not 1\n"
                + "  if (list_of_bytes[0] != 1):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # byte is '2'?\n"
                + "  if (list_of_bytes[1] == 50):\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  # byte is '1'?\n"
                + "  if (list_of_bytes[1]  == 49):\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  return False\n"
                + "\n"
                + "  end\n"
                + "\n"
                + "  # Returns True if list_of_byte is [1, '3']\n"
                + "  # Used to test OBJ = 0x3\n"
                + "  def is_OBJ_gripper_at_position (list_of_bytes):\n"
                + "\n"
                + "  # list length is not 1\n"
                + "  if (list_of_bytes[0] != 1):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # byte is '3'?\n"
                + "  if (list_of_bytes[1] == 51):\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  def is_not_OBJ_gripper_at_position (list_of_bytes):\n"
                + "\n"
                + "  if (is_OBJ_gripper_at_position(list_of_bytes)):\n"
                + "  return False\n"
                + "  else:\n"
                + "  return True\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "  def is_FLT_no_fault(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte is '0'?\n"
                + "  if (list_of_bytes[1] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # second byte is '0'?\n"
                + "  if (list_of_bytes[2] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "\n"
                + "  end\n"
                + "\n"
                + "  def is_FLT_action_delayed(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte is '0'?\n"
                + "  if (list_of_bytes[1] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # second byte is '5'?\n"
                + "  if (list_of_bytes[2] != 53):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  def is_FLT_not_activated(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte is '0'?\n"
                + "  if (list_of_bytes[1] != 48):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # second byte is '7'?\n"
                + "  if (list_of_bytes[2] != 55):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "  end\n"
                + "\n"
                + "  def is_FLT_autorelease_in_progress(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte is '1'?\n"
                + "  if (list_of_bytes[1] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # second byte is '1'?\n"
                + "  if (list_of_bytes[2] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "\n"
                + "  end\n"
                + "\n"
                + "  def is_FLT_overcurrent(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte is '1'?\n"
                + "  if (list_of_bytes[1] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # second byte is '4'?\n"
                + "  if (list_of_bytes[2] != 52):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "\n"
                + "  end\n"
                + "\n"
                + "  def is_FLT_autorelease_completed(list_of_bytes):\n"
                + "\n"
                + "  # list length is not 2\n"
                + "  if (list_of_bytes[0] != 2):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # first byte is '1'?\n"
                + "  if (list_of_bytes[1] != 49):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  # second byte is '5'?\n"
                + "  if (list_of_bytes[2] != 53):\n"
                + "  return False\n"
                + "  end\n"
                + "\n"
                + "  return True\n"
                + "\n"
                + "  end\n"
                + "\n"
                + "  def rq_set_var(var_name, var_value, gripper_socket=\"gripper_socket\"):\n"
                + "\n"
                + "  sync()\n"
                + "  if (var_name == ACT):\n"
                + "  socket_set_var(\"ACT\", var_value, gripper_socket)\n"
                + "  elif (var_name == GTO):\n"
                + "  socket_set_var(\"GTO\", var_value, gripper_socket)\n"
                + "  elif (var_name == ATR):\n"
                + "  socket_set_var(\"ATR\", var_value, gripper_socket)\n"
                + "  elif (var_name == ARD):\n"
                + "  socket_set_var(\"ARD\", var_value, gripper_socket)\n"
                + "  elif (var_name == FOR):\n"
                + "  socket_set_var(\"FOR\", var_value, gripper_socket)\n"
                + "  elif (var_name == SPE):\n"
                + "  socket_set_var(\"SPE\", var_value, gripper_socket)\n"
                + "  elif (var_name == POS):\n"
                + "  socket_set_var(\"POS\", var_value, gripper_socket)\n"
                + "  else:\n"
                + "  end\n"
                + "\n"
                + "  sync()\n"
                + "  ack = socket_read_byte_list(3, gripper_socket)\n"
                + "  sync()\n"
                + "\n"
                + "  while(is_not_ack(ack)):\n"
                + "\n"
                + "  textmsg(\"rq_set_var : retry\", \" ...\")\n"
                + "  textmsg(\"rq_set_var : var_name = \", var_name)\n"
                + "  textmsg(\"rq_set_var : var_value = \", var_value)\n"
                + "\n"
                + "  if (ack[0] != 0):\n"
                + "  textmsg(\"rq_set_var : invalid ack value = \", ack)\n"
                + "  end\n"
                + "\n"
                + "  socket_set_var(var_name , var_value,gripper_socket)\n"
                + "  sync()\n"
                + "  ack = socket_read_byte_list(3, gripper_socket)\n"
                + "  sync()\n"
                + "  end\n"
                + "  end\n"
                + "\n"
                + "\n"
                + "  def rq_get_var(var_name, nbr_bytes, gripper_socket=\"gripper_socket\"):\n"
                + "\n"
                + "  if (var_name == FLT):\n"
                + "  socket_send_string(\"GET FLT\",gripper_socket)\n"
                + "  sync()\n"
                + "  elif (var_name == OBJ):\n"
                + "  socket_send_string(\"GET OBJ\",gripper_socket)\n"
                + "  sync()\n"
                + "  elif (var_name == STA):\n"
                + "  socket_send_string(\"GET STA\",gripper_socket)\n"
                + "  sync()\n"
                + "  elif (var_name == PRE):\n"
                + "  socket_send_string(\"GET PRE\",gripper_socket)\n"
                + "  sync()\n"
                + "  else:\n"
                + "  end\n"
                + "\n"
                + "  var_value = socket_read_byte_list(nbr_bytes, gripper_socket)\n"
                + "  sync()\n"
                + "\n"
                + "  return var_value\n"
                + "  end\n"
                + "\n"
                + "  ############################################\n"
                + "  # normalized functions (maps 0-100 to 0-255)\n"
                + "  ############################################\n"
                + "  def rq_set_force_norm(force_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  force_gripper = norm_to_gripper(force_norm)\n"
                + "  rq_set_force(force_gripper, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_set_speed_norm(speed_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  speed_gripper = norm_to_gripper(speed_norm)\n"
                + "  rq_set_speed(speed_gripper, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_move_norm(pos_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = norm_to_gripper(pos_norm)\n"
                + "  rq_move(pos_gripper, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_move_and_wait_norm(pos_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = norm_to_gripper(pos_norm)\n"
                + "  rq_move_and_wait(pos_gripper, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "  def rq_set_pos_norm(pos_norm, gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = norm_to_gripper(pos_norm)\n"
                + "  rq_set_pos(pos_gripper, gripper_socket)\n"
                + "  end\n"
                + "\n"
                + "\n"
                + "  def rq_current_pos_norm(gripper_socket=\"gripper_socket\"):\n"
                + "  pos_gripper = rq_current_pos(gripper_socket)\n"
                + "  pos_norm = gripper_to_norm(pos_gripper)\n"
                + "  return pos_norm\n"
                + "  end\n"
                + "\n"
                + "  def gripper_to_norm(value_gripper):\n"
                + "  value_norm = (value_gripper / 255) * 100\n"
                + "  return floor(value_norm)\n"
                + "  end\n"
                + "\n"
                + "  def norm_to_gripper(value_norm):\n"
                + "  value_gripper = (value_norm / 100) * 255\n"
                + "  return ceil(value_gripper)\n"
                + "  end\n"
                + "\n"
                + "  def rq_get_position():\n"
                + "  return rq_current_pos_norm()\n"
                + "  end\n"
                + "  #########################################\n"
                + "  rq_obj_detect = 0\n"
                + "  socket_open(\"127.0.0.1\",63352,\"gripper_socket\")\n"
                + "\n"
                + "\n";
        return initGripper;
    }

    public String moveChessPiece(String moveCoordinates) {
        String moveChessPiece
                = "  ###########################################\n"
                + "  #######Vision urcap preamble end##########\n"
                + "  ##########################################\n"
                + "\n"
                + "  moveCoordinates=" + moveCoordinates + "\n"
                + "  a=" + a + "\n"
                + "  v=" + v + "\n"
                + "  # Home position\n"
                + "   home=[1.5766899585723877, -1.1896641890155237, 0.01620197296142578, -0.1944206396685999, -1.5496752897845667, -0.1212380568133753]\n"
                + "  movej(home, a, v)\n"
                + "  sleep(0.1)\n"
                + "  # Open gripper\n"
                + "  $ 6 \"Gripper Move 60%\"\n"
                + "  if(not rq_is_gripper_activated()):\n"
                + "    popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "    end\n"
                + "  rq_set_speed_norm(100)\n"
                + "  rq_set_force_norm(0)\n"
                + "  rq_move_and_wait_norm(60)\n"
                + "  sleep(1)\n"
                + "\n"
                + "  # Go to position and pick up chess piece\n"
                + "  x=moveCoordinates[1]\n"
                + "  y=moveCoordinates[0]\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.148641277261, -.167405716930, .275361426469, -1.134769567978, -2.914423792411, .014017954756], p[-.148646876515, -.483029173626, .275354214052, -1.134793377507, -2.914454179611, .013918668104], x/7), interpolate_pose(p[.166986285479, -.159722961604, .275343950373, -1.134896905575, -2.914384054477, .013926778521], p[.169206615709, -.476161017990, .275299159949, -1.091812717031, -2.930982132936, .014329235678],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[-.148638030624, -.167396705711, .275346546436, -1.134838045119, -2.914343741892, .014009526471]),p[-.148639018422, -.167404715372, .275344789831, -1.134826315810, -2.914418463365, .014046348421])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(0.1)\n"
                + "  #Pallet floor position\n"
                + "  pose_1 = interpolate_pose(interpolate_pose(p[-.148633351389, -.167394963703, .194329602083, -1.134838408600, -2.914506214363, .013735227554], p[-.145707080294, -.484734867814, .194347589162, -1.134730656245, -2.914436947954, .013832446082], x/7), interpolate_pose(p[.167705746025, -.164369800443, .195279302190, -1.134698766016, -2.914529747681, .013920708709], p[.171477909925, -.479552206583, .195292366342, -1.134807515510, -2.914466354089, .013865408924],x/7), y/7)\n"
                + "  movel(pose_trans(pose_1, pose_trans(pose_inv(p[-.148630421465, -.167396054366, .194349126896, -1.134806994234, -2.914425749961, .013895494310]),p[-.148638846167, -.167385549674, .194358488408, -1.134913113336, -2.914336237337, .013928892405])), a, v)\n"
                + "  movel(pose_1, a, v)\n"
                + "  sleep(0.1)\n"
                + "\n"
                + "  #Grip piece\n"
                + "  $ 7 \"Gripper Close\"\n"
                + "  if(not rq_is_gripper_activated()):\n"
                + "      popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "      end\n"
                + "  rq_set_speed_norm(100)\n"
                + "  rq_set_force_norm(0)\n"
                + "  rq_move_and_wait_norm(100)\n"
                + "\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.148641277261, -.167405716930, .275361426469, -1.134769567978, -2.914423792411, .014017954756], p[-.148646876515, -.483029173626, .275354214052, -1.134793377507, -2.914454179611, .013918668104], x/7), interpolate_pose(p[.166986285479, -.159722961604, .275343950373, -1.134896905575, -2.914384054477, .013926778521], p[.169206615709, -.476161017990, .275299159949, -1.091812717031, -2.930982132936, .014329235678],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[-.148638030624, -.167396705711, .275346546436, -1.134838045119, -2.914343741892, .014009526471]),p[-.148639018422, -.167404715372, .275344789831, -1.134826315810, -2.914418463365, .014046348421])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(1)\n"
                + "\n"
                + "\n"
                + "  # Go to position and put down chess piece\n"
                + "  x=moveCoordinates[3]\n"
                + "  y=moveCoordinates[2]\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.148641277261, -.167405716930, .275361426469, -1.134769567978, -2.914423792411, .014017954756], p[-.148646876515, -.483029173626, .275354214052, -1.134793377507, -2.914454179611, .013918668104], x/7), interpolate_pose(p[.166986285479, -.159722961604, .275343950373, -1.134896905575, -2.914384054477, .013926778521], p[.169206615709, -.476161017990, .275299159949, -1.091812717031, -2.930982132936, .014329235678],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[-.148638030624, -.167396705711, .275346546436, -1.134838045119, -2.914343741892, .014009526471]),p[-.148639018422, -.167404715372, .275344789831, -1.134826315810, -2.914418463365, .014046348421])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(0.1)\n"
                + "  #Pallet floor position\n"
                + "  pose_1 = interpolate_pose(interpolate_pose(p[-.148633351389, -.167394963703, .194329602083, -1.134838408600, -2.914506214363, .013735227554], p[-.145707080294, -.484734867814, .194347589162, -1.134730656245, -2.914436947954, .013832446082], x/7), interpolate_pose(p[.167705746025, -.164369800443, .195279302190, -1.134698766016, -2.914529747681, .013920708709], p[.171477909925, -.479552206583, .195292366342, -1.134807515510, -2.914466354089, .013865408924],x/7), y/7)\n"
                + "  movel(pose_trans(pose_1, pose_trans(pose_inv(p[-.148630421465, -.167396054366, .194349126896, -1.134806994234, -2.914425749961, .013895494310]),p[-.148638846167, -.167385549674, .194358488408, -1.134913113336, -2.914336237337, .013928892405])), a, v)\n"
                + "  movel(pose_1, a, v)\n"
                + "  sleep(0.1)\n"
                + "  $ 8 \"Gripper Open\"\n"
                + "  if(not rq_is_gripper_activated()):\n"
                + "      popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "      end\n"
                + "  rq_set_speed_norm(100)\n"
                + "  rq_set_force_norm(20)\n"
                + "  rq_move_and_wait_norm(60)\n"
                + "  sleep(1)\n"
                + "  #Pallet roof position\n"
                + "  pose_2 = interpolate_pose(interpolate_pose(p[-.148641277261, -.167405716930, .275361426469, -1.134769567978, -2.914423792411, .014017954756], p[-.148646876515, -.483029173626, .275354214052, -1.134793377507, -2.914454179611, .013918668104], x/7), interpolate_pose(p[.166986285479, -.159722961604, .275343950373, -1.134896905575, -2.914384054477, .013926778521], p[.169206615709, -.476161017990, .275299159949, -1.091812717031, -2.930982132936, .014329235678],x/7), y/7)\n"
                + "  movel(pose_trans(pose_2, pose_trans(pose_inv(p[-.148638030624, -.167396705711, .275346546436, -1.134838045119, -2.914343741892, .014009526471]),p[-.148639018422, -.167404715372, .275344789831, -1.134826315810, -2.914418463365, .014046348421])), a, v)\n"
                + "  movel(pose_2, a, v)\n"
                + "  sleep(1)\n"
                + "\n"
                + "\n"
                + "  # Home position\n"
                + "  movej(home, a, v)\n"
                + "  sleep(0.1)\n"
                + "end";

        return initUR() + initGripper() + moveChessPiece;
    }

    public String lineUpPieces() {
        String lineUpPieces
                = "\n"
                + "  a=" + a + "\n"
                + "  v=" + v + "\n"
                + "  # Home position\n"
                + "  home=[1.5766899585723877, -1.1896641890155237, 0.01620197296142578, -0.1944206396685999, -1.5496752897845667, -0.1212380568133753]\n"
                + "  movej(home, a, v)\n"
                + "  sleep(0.1)\n"
                + "\n"
                + "\n"
                + "  j= -1\n"
                + "\n"
                + "  while j < 1:\n"
                + "      j = j + 1\n"
                + "      i= -1\n"
                + "      while i < 7:\n"
                + "          i = i + 1\n"
                + "          moveCoordinates=[i, j, j, i]\n"
                + "          # Open gripper\n"
                + "          $ 6 \"Gripper Move 60%\"\n"
                + "          if(not rq_is_gripper_activated()):\n"
                + "            popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "            end\n"
                + "          rq_set_speed_norm(100)\n"
                + "          rq_set_force_norm(0)\n"
                + "          rq_move_and_wait_norm(60)\n"
                + "          sleep(0.1)\n"
                + "\n"
                + "          ## Go to position outside board and pick up chess piece\n"
                + "          x=moveCoordinates[0]\n"
                + "          y=moveCoordinates[1]\n"
                + "          #Pallet roof position outside board\n"
                + "          pose_4 = interpolate_pose(interpolate_pose(p[-.254833942517, -.167381059611, .271535461998, -1.134897459072, -2.914496582881, .013978797920], p[-.253424821618, -.422870230504, .274735190715, -1.139022155606, -2.927049316123, -.043443584008], x/7), interpolate_pose(p[-.216222299269, -.170427377313, .274690128813, -1.139281610927, -2.927316806428, -.043499083199], p[-.216238785672, -.422869250739, .274724161128, -1.139147444196, -2.927251113408, -.043375339322],x/7), y/1)\n"
                + "          movel(pose_trans(pose_4, pose_trans(pose_inv(p[-.254827311988, -.167380095927, .271530762301, -1.134775579334, -2.914544281122, .013910392717]),p[-.254832908902, -.167382254518, .271550797832, -1.134741179271, -2.914457015616, .014027561219])), a, v)\n"
                + "          movel(pose_4, a, v)\n"
                + "          sleep(0.1)\n"
                + "          #Pallet floor position outside board\n"
                + "          pose_3 = interpolate_pose(interpolate_pose(p[-.255772274130, -.170552461267, .192927524781, -1.136588145197, -2.919997142492, -.010600249549], p[-.254327786433, -.420112475288, .192959247674, -1.136650162187, -2.919856003970, -.010267918089], x/7), interpolate_pose(p[-.212068895125, -.167826013630, .192936067572, -1.136724005026, -2.919871196624, -.010456719869], p[-.212038755928, -.420135055957, .192944984529, -1.136686937505, -2.919925489739, -.010408606259],x/7), y/1)\n"
                + "          movel(pose_trans(pose_3, pose_trans(pose_inv(p[-.255767809133, -.170542497911, .192914828687, -1.136625086372, -2.919990175643, -.010652382269]),p[-.255780895377, -.170545844246, .192938470964, -1.136659712940, -2.919919837938, -.010506198418])), a, v)\n"
                + "          movel(pose_3, a, v)\n"
                + "          sleep(0.1)\n"
                + "          #Grip piece\n"
                + "          $ 7 \"Gripper Close\"\n"
                + "          if(not rq_is_gripper_activated()):\n"
                + "              popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "              end\n"
                + "          rq_set_speed_norm(100)\n"
                + "          rq_set_force_norm(0)\n"
                + "          rq_move_and_wait_norm(100)\n"
                + "          sleep(0.1)\n"
                + "          #Pallet roof position outside board\n"
                + "          pose_4 = interpolate_pose(interpolate_pose(p[-.254833942517, -.167381059611, .271535461998, -1.134897459072, -2.914496582881, .013978797920], p[-.253424821618, -.422870230504, .274735190715, -1.139022155606, -2.927049316123, -.043443584008], x/7), interpolate_pose(p[-.216222299269, -.170427377313, .274690128813, -1.139281610927, -2.927316806428, -.043499083199], p[-.216238785672, -.422869250739, .274724161128, -1.139147444196, -2.927251113408, -.043375339322],x/7), y/1)\n"
                + "          movel(pose_trans(pose_4, pose_trans(pose_inv(p[-.254827311988, -.167380095927, .271530762301, -1.134775579334, -2.914544281122, .013910392717]),p[-.254832908902, -.167382254518, .271550797832, -1.134741179271, -2.914457015616, .014027561219])), a, v)\n"
                + "          movel(pose_4, a, v)\n"
                + "          sleep(0.1)\n"
                + "\n"
                + "\n"
                + "          ## Go to board and place chess piece\n"
                + "          x=moveCoordinates[2]\n"
                + "          y=moveCoordinates[3]\n"
                + "          #Pallet roof position\n"
                + "          pose_2 = interpolate_pose(interpolate_pose(p[-.148641277261, -.167405716930, .275361426469, -1.134769567978, -2.914423792411, .014017954756], p[-.148646876515, -.483029173626, .275354214052, -1.134793377507, -2.914454179611, .013918668104], x/7), interpolate_pose(p[.166986285479, -.159722961604, .275343950373, -1.134896905575, -2.914384054477, .013926778521], p[.169206615709, -.476161017990, .275299159949, -1.091812717031, -2.930982132936, .014329235678],x/7), y/7)\n"
                + "          movel(pose_trans(pose_2, pose_trans(pose_inv(p[-.148638030624, -.167396705711, .275346546436, -1.134838045119, -2.914343741892, .014009526471]),p[-.148639018422, -.167404715372, .275344789831, -1.134826315810, -2.914418463365, .014046348421])), a, v)\n"
                + "          movel(pose_2, a, v)\n"
                + "          sleep(0.1)\n"
                + "          #Pallet floor position\n"
                + "          pose_1 = interpolate_pose(interpolate_pose(p[-.148633351389, -.167394963703, .194329602083, -1.134838408600, -2.914506214363, .013735227554], p[-.145707080294, -.484734867814, .194347589162, -1.134730656245, -2.914436947954, .013832446082], x/7), interpolate_pose(p[.167705746025, -.164369800443, .195279302190, -1.134698766016, -2.914529747681, .013920708709], p[.171477909925, -.479552206583, .195292366342, -1.134807515510, -2.914466354089, .013865408924],x/7), y/7)\n"
                + "          movel(pose_trans(pose_1, pose_trans(pose_inv(p[-.148630421465, -.167396054366, .194349126896, -1.134806994234, -2.914425749961, .013895494310]),p[-.148638846167, -.167385549674, .194358488408, -1.134913113336, -2.914336237337, .013928892405])), a, v)\n"
                + "          movel(pose_1, a, v)\n"
                + "          sleep(0.1)\n"
                + "          $ 8 \"Gripper Move 48%\"\n"
                + "          if(not rq_is_gripper_activated()):\n"
                + "              popup(\"The gripper is not activated. Please activate the gripper using the Gripper Toolbar and run the program again.\")\n"
                + "              end\n"
                + "          rq_set_speed_norm(100)\n"
                + "          rq_set_force_norm(20)\n"
                + "          rq_move_and_wait_norm(60)\n"
                + "          sleep(0.1)\n"
                + "          #Pallet roof position\n"
                + "          pose_2 = interpolate_pose(interpolate_pose(p[-.148641277261, -.167405716930, .275361426469, -1.134769567978, -2.914423792411, .014017954756], p[-.148646876515, -.483029173626, .275354214052, -1.134793377507, -2.914454179611, .013918668104], x/7), interpolate_pose(p[.166986285479, -.159722961604, .275343950373, -1.134896905575, -2.914384054477, .013926778521], p[.169206615709, -.476161017990, .275299159949, -1.091812717031, -2.930982132936, .014329235678],x/7), y/7)\n"
                + "          movel(pose_trans(pose_2, pose_trans(pose_inv(p[-.148638030624, -.167396705711, .275346546436, -1.134838045119, -2.914343741892, .014009526471]),p[-.148639018422, -.167404715372, .275344789831, -1.134826315810, -2.914418463365, .014046348421])), a, v)\n"
                + "          movel(pose_2, a, v)\n"
                + "          sleep(0.1)\n"
                + "      end\n"
                + "  end\n"
                + "  # Home position\n"
                + "  movej(home, a, v)\n"
                + "end"
                + "\n";
        return initUR() + initGripper() + lineUpPieces;
    }
}
